times_2012 <- sampleTimes[year(sampleTimes)=="2012"]
length(times_2012)
head(times_2012)
mondays_2012 <- times_2012[wday(times_2012)==2]
length(mondays_2012)
seq(3,17, step=2)
int.seq(3,17,step=2)
seq.int(3,17,step=2)
seq.int(3,17,step=3)
?seq.int
seq.int(3,17,by=2)
?str_replace_all
?read.table
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
View(data)
class(data)
sum(is.na(data))
length(is.na(data))
?file.path
get_wd()
getwd()
file.path("./Assignments/UCI HAR Dataset", "test")
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
current_wd
file.path(current_wd, "test", "subject_test")
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
View(y_text)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
file.path(current_wd, "test", "Inertial Signals", "body_acc_x_train.txt")
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(subject_test, 100)
?merge
library(dplyr)
?merge
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
View(subject_train)
head(subject_train[[1]]
)
args(intersect)
intersect(subject_train[[1]], subject_test[[1]])
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
names(test_data)
head(test_data[["V1"]])
?fread
c("a")
args(merge)
?merge
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
?rm
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
rm(y_test)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
?grep
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
rm(features)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
desired_features
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
desired_features
head(feature_names)
?str_detect
library(stringr)
?str_detect
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
desired_features
?grep
class(feature_names)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
class(feature_names)
diserid_features
desired_features
feature_names[desired_features]
desired_features
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
ns <- cbind("subject", "activity", feature_names)
dim(ns)
?cbind
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
desired_features
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
desired_features
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
rm(desired_features)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
data[,subject]
data[,.CD==subject]
data[,.SD=="subject"]
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data[,2])
head(data[,c(1,2)])
head(data[,c(1,2, "tBodyAcc-mean()-X")])
head(data[,c("subject",2)])
head(data[,"subject"])
c("subject", 2)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
library(plyr)
library(plyr)
library(dplyr)
detach("package:plyr")
detach("package:dplyr")
?arrange
library(dplyr)
?dplyr
?transmute
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
class(data)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
?tidyr
library(tidyr)
?tidyr
?gather
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
head(data, 100)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
?group_by
class(data)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
?summarise
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(average_data)
?exist
?exists
typeof(data)
class(data)
0^NA
0^NaN
NaN^0
NA^0
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean)) # 0.001
library(XML)
?XML
??XML
browseVignettes()
?xmlTreeParse
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
?xmlTreeParse
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
rm(list=ls())
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
names(rootNode)
class(rootNode)
typeof(rootNode)
rootsize(rootNode)
library(methods)
rootsize(rootNode)
xmlSize(rootNode)
rootNode
?xmlSApply
typeof(xmlSApply)
class(xmlSApply)
xmlSApply(rootNode, xmlValue)
?xpathSApply
?child
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
scores
teams
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
scores <- xpathSApply(doc,"//li[@class='score']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
teams
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
scores <- xpathSApply(doc,"//div[@class='score']",xmlValue)
scores
teams <- xpathSApply(doc,"//div[@class='team-name']",xmlValue)
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
teams <- xpathSApply(doc,"//[@class='team-name']",xmlValue)
source('~/data_science_coursera/LectureNotes/unederstandingXML.R')
teams <- xpathSApply(doc,"//li[@class='team-name']",xmlValue)
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W1_quiz.r')
sum(housing_data$VAL==24, na.rm=TRUE) # How many properties are worth $1,000,000 or more?
head(housing_data$FES)
class(housing_data#FES)
)
class(housing_data$FES)
source('~/data_science_coursera/Assignments/P3_W1_quiz.r')
sum(dat$Zip*dat$Ext,na.rm=T)
source('~/data_science_coursera/Assignments/P3_W1_quiz.r')
sum(as.numeric(xpathApply(rootNode, "//zipcode", xmlValue)==21231))
source('~/data_science_coursera/Assignments/P3_W1_quiz.r')
rm(list=ls())
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(data.table)
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(DT$pwgg15)
head(DT$pwgt15)
head(DT$pwgtp15)
head(DT$pwgtp15, 100)
head(DT$SEX)
DT[,mean(pwgtp15),by=SEX]
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
{mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)}
{rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]}
rowMeans(DT)
lapply(DT, class)
lapply(DT, function(x) class(x)=="interger")
lapply(DT, class)
lapply(DT, function(x) class(x)=="integer")
sapply(DT, function(x) class(x)=="integer")
table(sapply(DT, function(x) class(x)=="integer"))
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT$pwgtp15,by=DT$SEX)
?replicate
rnorm()
rnorm(1)
replicate(10, rnorm(1))
# now test the remaining three candidates
mean(replicate(100000, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
# now test the remaining three candidates
mean(replicate(1000, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
# now test the remaining three candidates
mean(replicate(2, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
# now test the remaining three candidates
mean(replicate(4, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
# now test the remaining three candidates
mean(replicate(32, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
?hist
# now test the remaining three candidates
mean(replicate(10, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
mean(replicate(10, system.time(DT[,mean(pwgtp15),by=SEX])))
mean(replicate(10, system.time(tapply(DT$pwgtp15,DT$SEX,mean))))
# now test the remaining three candidates
sum(replicate(10, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
sum(replicate(10, system.time(DT[,mean(pwgtp15),by=SEX])))
sum(replicate(10, system.time(tapply(DT$pwgtp15,DT$SEX,mean))))
# now test the remaining three candidates
sum(replicate(20, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
sum(replicate(20, system.time(DT[,mean(pwgtp15),by=SEX])))
sum(replicate(20, system.time(tapply(DT$pwgtp15,DT$SEX,mean))))
# now test the remaining three candidates
sum(replicate(40, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))))
sum(replicate(40, system.time(DT[,mean(pwgtp15),by=SEX])))
sum(replicate(40, system.time(tapply(DT$pwgtp15,DT$SEX,mean))))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))["user"]
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]]
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[["user"]]
class(system.time(sapply(split(DT$pwgtp15,DT$SEX),mean)))
names(system.time(sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[["user.self"]]
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[["user.ching"]]
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[["user.child"]]
sum(replicate(40, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]])) #
sum(replicate(40, system.time(DT[,mean(pwgtp15),by=SEX])[[1]])) #
sum(replicate(40, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]])) #
sum(replicate(80, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]])) #
sum(replicate(80, system.time(DT[,mean(pwgtp15),by=SEX])[[1]])) #
sum(replicate(80, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]])) #
#
# housing_data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
# sum(housing_data$VAL==24, na.rm=TRUE) # How many properties are worth $1,000,000 or more?
#
#
library(readxl)
if (!file.exists("data")) {dir.create("data")}
file_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(file_url, destfile="./data/gas.xlsx")
gas_data <- read_excel("./data/gas.xlsx", range = "G18:O23")
dat <- gas_data
sum(dat$Zip*dat$Ext,na.rm=T)
?boxplot
boxplot(c(replicate(100, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]]),
replicate(100, system.time(DT[,mean(pwgtp15),by=SEX])[[1]]),
replicate(100, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]]))
)
?boxplot
boxplot(c(replicate(100, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]])))
boxplot(c(c(1,2,3), c(4,5,,6)))
boxplot(c(c(1,2,3), c(4,5,6)))
boxplot(c(1,2,3), c(4,5,6))
boxplot(replicate(100, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]]),
replicate(100, system.time(DT[,mean(pwgtp15),by=SEX])[[1]]),
replicate(100, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]]))
lapply(c(replicate(10, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]]),
replicate(10, system.time(DT[,mean(pwgtp15),by=SEX])[[1]]),
replicate(10, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]])), sum)
sapply(c(replicate(10, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]]),
replicate(10, system.time(DT[,mean(pwgtp15),by=SEX])[[1]]),
replicate(10, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]])), sum)
sapply(list(replicate(10, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]]),
replicate(10, system.time(DT[,mean(pwgtp15),by=SEX])[[1]]),
replicate(10, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]])), sum)
sapply(list(replicate(1000, system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))[[1]]),
replicate(1000, system.time(DT[,mean(pwgtp15),by=SEX])[[1]]),
replicate(1000, system.time(tapply(DT$pwgtp15,DT$SEX,mean))[[1]])), sum)
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W2_quiz.R')
colnames(df) <- head(names(non_null_data), 72)
# get the answer
df[df$name=="datasharing",]$created_at[[1]]
# Two and Three, practice SQL commands
library(sqldf)
source('~/data_science_coursera/Assignments/P3_W2_quiz.R')
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
# Four, reading html lines
url <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html_data <- readLines(url)
close(url)
lapply(html_data[c(10,20,30,100)], nchar)
?readLines
?substr
?readr
rm(list=ls())
data <- readLines("./data.STTweekly.for")
?read_lines
data <- read_lines("./data.STTweekly.for", skip=4)
data <- read_lines("./data/STTweekly.for", skip=4)
head(data)
args(substr)
substr(data[[1]], 10, 20)
substr(data[[1]], 15, 21)
substr(data[[1]], 16, 21)
substr(data[[1]], 16, 19)
data[1]
data <- read_lines("./data/STTweekly.for", skip=4)
data <- lapply(data, substr, 16, 19)
data <- read_lines("./data/STTweekly.for", skip=4)
fourth_column_char <- lapply(data, substr, 16, 19)
fourth_column_int <- as.numeric(fourth_column_char)
sum(fourth_column_int)
head(data,1)
substr(data[[1]], 16, 19)
substr(data[[1]], 25, 35)
substr(data[[1]], 9, 35)
substr(data[[1]], 29, 35)
substr(data[[1]], 29, 3)
substr(data[[1]], 29, 33)
substr(data[[1]], 29, 32)
data <- read_lines("./data/STTweekly.for", skip=4)
fourth_column_char <- lapply(data, substr, 29, 32)
fourth_column_int <- as.numeric(fourth_column_char)
sum(fourth_column_int)
rm(list=ls())
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(average_data, 20)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(average_data, 20)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(average_data, 20)
tail(average_data, 20)
table(average_data$measurment_value>0)
table(average_data$measurement_value>0)
?write.table
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
write.table(average_data, file="tidy_data.txt", col.names=FALSE)
boxplot(averag_data$measurement_value)
boxplot(average_data$measurement_value)
length(levels(as.factor(average_data$measurement_type)))
levels(as.factor(average_data$subject))
levels(as.factor(average_data$activity))
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
levels(data$subject)
levels(as.factor(data$subject))
measurement_types
?gather
?separate
sd <- separate(data, measurement_type, sep="-", into=c("measurement_name", "measurement_name", "axis"), fill="right")
head(sd)
levels(as.factor(sd$axis))
table(sd$axis)
?table
table(sd$axis,useNA="always")
?unite
sd2 <- unite(sd, "measurement_type", measurement_name, axis, sep="_", )
head(sd2)
head(sd)
sd <- separate(data, measurement_type, sep="-", into=c("measurement_type", "mean/std", "axis"), fill="right")
head(sd)
sd2 <- unite(sd, "measurement_type", measurement_type, mean/std, sep="_")
sd2 <- unite(sd, "measurement_type", measurement_type, "mean/std, sep="_")
sd2 <- unite(sd, "measurement_type", measurement_type, "mean/std", sep="_")
head(sd2)
sd2 <- unite(sd, "measurement_type", measurement_type, axis, sep="_")
head(sd2)
?spread
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
sum(is.na(data$measurement_type))
levels(as.factor(data$measurement_type))
table(data$mean_or_std)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(data)
rm(sd)
rm(sd2)
df <- spread(data, "mean_or_std", "value")
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
?separate
?spread
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(average_data)
?colnames
?sub
?str_replace
?rename
?mutate
?gsub
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
?rename
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(average_data)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
head(average_data)
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
length(levels(as.factor(average_data$feature_name))))
length(levels(as.factor(average_data$feature_name)))
(levels(as.factor(average_data$feature_name)))
str(levels(as.factor(average_data$feature_name)))
print(levels(as.factor(average_data$feature_name)))
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
?tolower
source('~/data_science_coursera/Assignments/P3_W4_Cleaning.R')
tolower("* WALKING
* WALKING_UPSTAIRS
* WALKING_DOWNSTAIRS
* SITTING
* STANDING
* LAYING")
print("* walking\n* walking_upstairs\n* walking_downstairs\n* sitting\n* standing\n* laying")
print(levels(as.factor(average_data$feature_name)))
?write.table
write.table(levels(as.factor(average_data$feature_name)),"tmp.txt"
)
write.table(levels(as.factor(average_data$feature_name)),"tmp.txt"
)
?write.table
write.table(levels(as.factor(average_data$feature_name)),"tmp.txt", row.names=FALSE)
library(purrr)
?quantile
quantile(c(1,2,3,4,5))
class(quantile(c(1,2,3,4,5)))
rm(list=ls())
source('~/data_science_coursera/projects/3.-Getting-and-Cleaning-Data-/run_analysis.R')
setwd("./projects/3.-Getting-and-Cleaning-Data-
")
?setwd
getwd()
setwd(fil.path(getwd(),"projects", "3.-Getting-and-Cleaning-Data-
"))
setwd(file.path(getwd(),"projects", "3.-Getting-and-Cleaning-Data-
"))
setwd(file.path(getwd(),"projects", "3.-Getting-and-Cleaning-Data-"))
getwd()
source('~/data_science_coursera/projects/3.-Getting-and-Cleaning-Data-/run_analysis.R')
